name: Manual Gradle Dependency Submission
description: Gradle Dependency Submission for Unsupported Versions

inputs:
  gradle_task:
    required: true
    description: Gradle task to generate dependencies

runs:
  using: composite
  steps:
    - name: Generate Dependency Report
      shell: bash
      run: ./gradlew ${{ inputs.gradle_task }}

    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
      with:
        python-version: '3.x'

    - name: Parse Report and Generate JSON
      shell: bash
      run: |
        scripts_path="${{ github.action_path }}/../../../scripts"
        python3 ${scripts_path}/parse_dependencies.py
      
    - name: Upload Dependency Graph
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: dependency-graph
        path: build/dependency-graph.json
      
    - name: Submit Dependency Graph
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          try {
            const dependencyGraphFile = 'build/dependency-graph.json';
            const dependencyGraphRaw = fs.readFileSync(path.resolve(dependencyGraphFile), 'utf8');
            const dependencyGraph = JSON.parse(dependencyGraphRaw);

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            let commit;
            let branch;

            if (context.eventName === 'pull_request') 
              {
              branch = context.payload.pull_request.head.ref; // e.g. 'feature/ghas_integration'
              commit = context.payload.pull_request.head.sha;
              } 
            else 
              {
              branch = context.ref.replace('refs/heads/', ''); // remove prefix if needed
              commit = context.sha;
              }

            const ref = `refs/heads/${branch}`; // ‚úÖ API-compatible ref
            const commitSha = commit;

            console.log(`Ref to send in API: ${ref}`);
            console.log(`Commit SHA to use: ${commitSha}`);

            const jobName = context.job;

            console.log("Submitting Dependency Graph");
            console.log(`Owner: ${owner}`);
            console.log(`Repo: ${repo}`);
            console.log(`Commit Sha: ${commitSha}`);
            console.log(`Ref: ${ref}`);
            console.log(`Job Name: ${jobName}`);

            const response = await github.request('POST /repos/{owner}/{repo}/dependency-graph/snapshots', {
            owner: owner,
            repo: repo,
            headers: {
              accept: 'application/vnd.github+json'
            },
            data: {
              version: 0,
              job: {
                id: context.runId.toString(),
                correlator: jobName
              },
              ref: ref,
              sha: commitSha,
              detector: {
                name: "custom-dependency-extractor",
                version: "0.0.1",
                url: "https://github.com/ss/security-s-public"
              },
              scanned: new Date().toISOString(),
              manifests: {
                "gradle-dependencies": {
                  name: "gradle-dependencies",
                  file: {
                    source_location: dependencyGraphFile
                  },
                  metadata: {},
                  dependencies: dependencyGraph.dependencies
                }
             }
            }
          });

          // ‚úÖ Log status and response body
          console.log(`‚úÖ Submission Response Status: ${response.status}`);
          console.log(`üìé Submission URL: ${response.url}`);
          console.log(`üì¶ Response Data: ${JSON.stringify(response.data, null, 2)}`);

          } catch (error) {
            console.error("‚ùå Failed to submit dependency graph:");
            console.error(error);
            core.setFailed(error.message);
          }

